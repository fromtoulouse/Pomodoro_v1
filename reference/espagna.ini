int state;
int buttonMode = 3;
bool buttonModeSignal = LOW;

//------------------------------------------------------------------------------------------------------------------------------
// VARIABLES RELATED WITH POMODORO
//------------------------------------------------------------------------------------------------------------------------------
//Set up the LCD
#include <LiquidCrystal.h>
LiquidCrystal lcd(7, 8, 9, 10, 11, 12);

//Variables for initial Pomodoro process
int minsForPomodoro;
int studyTime;
int secCounter;
int studyMin;

//Variables for Cyclic Pomodoro
unsigned int numOfCycles;
unsigned int currentCycle;
bool restTime;

//Variables for time control
unsigned long msPerLoop = 1000;
unsigned long currentTime = 0;

//Variable for buttonAdd
int buttonAdd = 2;
bool buttonAddSignal = LOW;
long debounce;
long interruptInit;

//Variable for buttonPressure
int buttonPressure = 13;
bool active;
int aux;
int auxInit;
int configPom;

//------------------------------------------------------------------------------------------------------------------------------
// VARIABLES RELATED WITH HELLO!
//------------------------------------------------------------------------------------------------------------------------------
#include<Servo.h>
Servo servo;
int pos;
int hello, helloAux;

//------------------------------------------------------------------------------------------------------------------------------
// VARIABLES RELATED WITH LIGHTS
//------------------------------------------------------------------------------------------------------------------------------
int contador;
const int Azul = 5;
const int Rojo = 6;


void setup(){

	debounce = 150;
	interruptInit=0;
	restTime= false;

	state = 0;
	pinMode(buttonMode,INPUT);
	attachInterrupt(digitalPinToInterrupt(buttonMode), standPhone, CHANGE);
	//------------------------------------------------------------------------------------------------------------------------------
	// SET UP FOR POMODORO
	//------------------------------------------------------------------------------------------------------------------------------
	//Open serial monitor for debugging
	Serial.begin(9600);

	//Set up buttonAdd
	pinMode(buttonAdd, INPUT);
	attachInterrupt(digitalPinToInterrupt(buttonAdd), moreCycles, CHANGE);

	//Set up buttonAdd
	pinMode(buttonPressure, INPUT);


    resetPomodoro();

	if(state == 1)
		initLCD();
	//------------------------------------------------------------------------------------------------------------------------------
	// SET UP FOR HELLO!
	//------------------------------------------------------------------------------------------------------------------------------
	servo.attach(4);
	pos = 0;
	servo.write(pos);
	hello = 0;
	helloAux = 0;

    //------------------------------------------------------------------------------------------------------------------------------
	// SET UP FOR LIGHTS
	//------------------------------------------------------------------------------------------------------------------------------
    contador=0;
    pinMode(Rojo,OUTPUT);
    pinMode(Azul,OUTPUT);
    lights();
}


void loop(){
    switch (state)
    {
		case 0:
			if (hello == 0)
			{
				hello = 1;
				cuicui();
			}
		break;
		case 1:
			if (auxInit == 0){
				initLCD();
				configPom = 0;
				auxInit = 1;
			}
			POMODORO(); //State 1
		break;
        case 2:
            lights();
        break;
    }
}


void lights()
{
    Serial.println(contador);

	switch (contador){
		case 0:
			digitalWrite(Azul,LOW);
			digitalWrite(Rojo,LOW);

		break;
		case 1:
			digitalWrite(Azul,HIGH);
			digitalWrite(Rojo,HIGH);
		break;
		case 2:
			digitalWrite(Azul,LOW);
			digitalWrite(Rojo,HIGH);
		break;
		case 3:
			digitalWrite(Azul,HIGH);
			digitalWrite(Rojo,LOW);
		break;
		case 4:
			digitalWrite(Azul,HIGH);
			digitalWrite(Rojo,LOW);
			delay(250);
			digitalWrite(Azul,LOW);
			digitalWrite(Rojo,HIGH);
			delay(250);
		break;
		case 5:
			analogWrite(Azul,100);
			analogWrite(Rojo,100);
		break;
		case 6:
			for(int i=0;i<255;i++){
				analogWrite(Azul,i);
				analogWrite(Rojo,i);
				delay(10);
			}
			for(int i=0;i<255;i++){
				analogWrite(Azul,255-i);
				analogWrite(Rojo,255-i);
				delay(10);
			}
		break;
		case 7:
			for(int i=0;i<255;i++){
				analogWrite(Azul,i);
				analogWrite(Rojo,255-i);
				delay(10);
			}
			for(int i=0;i<255;i++){
				analogWrite(Azul,255-i);
				analogWrite(Rojo,i);
				delay(10);
			}
		break;
		case 8:
			for(int i=0;i<255;i++){
				analogWrite(Azul,i);
				analogWrite(Rojo,255-i);
				delay(2);
			}
			for(int i=0;i<255;i++){
				analogWrite(Azul,255-i);
				analogWrite(Rojo,i);
				delay(2);
			}
		break;
	}
}

void timerFunc(int* studyTime, int* secCounter, int* studyMin)
{
	//Update s to end
	*studyTime = *studyTime - 1;

	//Control secsPerMin
	if((*secCounter) == 00)
	{
		(*secCounter) = 59;
		(*studyMin)--;
	}else
		(*secCounter)--;
}

void moreCycles()
{
    //Control cyclic component
	buttonAddSignal = digitalRead(buttonAdd);

	// CONTROL THE STATE
	if(buttonAddSignal == HIGH and millis()-interruptInit>debounce)
	{
		interruptInit=millis();
		switch(state)
        {
			case 0:
				Serial.println("Llamo cuicui");
				if(helloAux == 0)
					hello = 0;
			break;
			case 1:
				numOfCycles = ((numOfCycles)%9)+1;
				Serial.println(numOfCycles);
			break;
			case 2:
				contador= (contador +1)%9;
				lights();
			break;
        }
	}
}

void standPhone()
{
    //Control cyclic component
	buttonModeSignal = digitalRead(buttonMode);
	Serial.println("Entro en la interrupcion de cambio estado");
    if(buttonModeSignal == HIGH)
    {
        Serial.println("Cambio estado");
		state = (state+1)%3;
        Serial.println(state);
        resetPomodoro();
        delay(500);
        Serial.println("Ya he cambiado todo");
    }
}

void resetPomodoro()
{
	aux = 0;
	auxInit = 0;
	active = LOW;
    //Reset ligths
	contador = 0;

	//Set up cyclic variable config
	numOfCycles = 1;
	currentCycle = 1;
	restTime = 0;
	digitalWrite(Rojo,LOW);
	digitalWrite(Azul,LOW);

	//Set up initial time variable config
	minsForPomodoro = 1;
	(minsForPomodoro < 1)? minsForPomodoro = 1: minsForPomodoro = minsForPomodoro;
	studyTime = minsForPomodoro * 60;
	secCounter = 00;
	studyMin = minsForPomodoro;
    lcd.clear();
	if (state == 0)
		lcd.print("[MODO SALUDO]");
	if (state == 2)
		lcd.print("[MODO LUCES]");
}

void POMODORO()
{
	//Updating current time
	currentTime = millis();
	active = digitalRead(buttonPressure);
	if (active == HIGH and configPom ==0)
	{
		lcd.setCursor(0,0);
		lcd.print("ESTAS ESTUDIANDO");
		configPom = 1;
	}

    while(millis() < currentTime+msPerLoop){
		//Synchronizing the loop with secs
    }

	//Update the LCD
    if(currentCycle <= numOfCycles)
    {
		if (active || restTime == true){
			if (aux == 1){
				lcd.clear();
				lcd.setCursor(0, 0);
				lcd.print("ESTAS ESTUDIANDO");
				aux = 0;
			}

		//Update Timer
		timerFunc(&studyTime, &secCounter, &studyMin);

		if(studyTime == 0)
		{
			Serial.println("He terminado el tiempo");
			if(restTime == 0 && currentCycle < numOfCycles)
			{
				Serial.println("CAMBIO A DESCANSO");
				restTime = 1;
                lcd.clear();
                lcd.setCursor(0,0);
				lcd.print("DESCANSO");
				studyMin = 1;
				studyTime = studyMin * 60;
			} else{
				lcd.clear();
				lcd.setCursor(0,0);
				lcd.print("ESTAS ESTUDIANDO");
				restTime = 0;
				currentCycle++;
				(currentCycle <= numOfCycles)? studyMin = minsForPomodoro : studyMin = 0;
				studyTime = studyMin * 60;
			}
		}
    } else{
		if(aux == 0 && configPom == 1) {
			lcd.clear();
			lcd.setCursor(0, 0);
			lcd.print("ESTUDIA >:C");
			aux = 1;
		}
    }

    if(state == 1)
		LCDPrint();
    }else{
		lcd.setCursor(0, 0);
        if (currentCycle <= 10)
        {
			currentCycle = 11;
			lcd.clear();
        }
		lcd.setCursor(0,0);
		lcd.print(" FIN DE ESTUDIO");
    }

	//Debugging values
	Serial.print("SecsFromThisMin: ");
    Serial.println(secCounter);
	Serial.print("Mins to End: ");
	Serial.println(studyMin);
	Serial.print("currentMillis: ");
	Serial.println(currentTime);
	if (state == 2){
        lcd.clear();
		lcd.print("[MODO LUCES]");
	}
}

void LCDPrint()
{
	//Set up LCD values
    lcd.setCursor(0, 1);

    //Print mins left
    if(studyMin < 10){
		lcd.print(0);
		lcd.print(studyMin);
    }else
		lcd.print(studyMin);

	lcd.print(":");

	//Print secs left
	if(secCounter < 10){
		lcd.print(0);
		lcd.print(secCounter);
	}else
		lcd.print(secCounter);

    //Print rounds
	lcd.setCursor(11,1);
	lcd.print("R:");
    (currentCycle > numOfCycles)? lcd.print(currentCycle-1) : lcd.print(currentCycle);
	lcd.print("/");
	lcd.print(numOfCycles);
}

void initLCD()
{
	//Set up LCD config
	lcd.begin(16, 2);
	lcd.print("PREPARA ESTUDIO:");

	//Print mins left
    lcd.setCursor(0, 1);

	if(studyMin < 10){
		lcd.print(0);
		lcd.print(studyMin);
    }else
      lcd.print(studyMin);

    lcd.print(":");

	//Print secs left
    if(secCounter < 10){
		lcd.print(0);
		lcd.print(secCounter);
    }else
		lcd.print(secCounter);

	//Print rounds
	lcd.setCursor(11,1);
	lcd.print("R:");
	lcd.print(currentCycle);
	lcd.print("/");
	lcd.print(numOfCycles);
}

void cuicui(){
	if(state == 0)
	{
		lcd.setCursor(0,0);
		lcd.print("HOLA AMIGO! :D");
		helloAux = 1;
		for(int i = 0; i< 2; i++){

			for(pos = 0; pos<115; pos = pos +5){
				if(state != 0)
					break;
				Serial.println("Moviendo un grado");
				servo.write(pos);
				delay(5);
			}
			for(pos = pos; pos>80; pos = pos-5){
				if(state != 0)
					break;
				Serial.println("Moviendo menos un grado");
				servo.write(pos);
				delay(5);
			}
		}
	}
	servo.write(90);
	helloAux = 0;
	lcd.clear();
	lcd.setCursor(0,0);
	lcd.print("[MODO SALUDO]");
}
